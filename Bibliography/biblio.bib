@comment{% Encoding: UTF-8}

@comment{jabref-meta: databaseType:bibtex;}

@comment{jabref-meta: grouping:
0 AllEntriesGroup:;
1 StaticGroup:VM\;0\;1\;0x8066ccff\;\;\;;
1 StaticGroup:Security\;0\;1\;0xe6e64dff\;\;\;;
1 StaticGroup:Quantization\;0\;1\;0xe6b34dff\;\;\;;
1 StaticGroup:Verification\;0\;1\;0xcc8099ff\;\;\;;
1 StaticGroup:Hardware\;0\;1\;0x8099ffff\;\;\;;
1 StaticGroup:Read\;0\;1\;0x00ff00ff\;\;\;;
1 StaticGroup:Testing\;0\;1\;0x994d66ff\;\;\;;
}

@phdthesis{1987,
 author = {David Ungar},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1016/0141-9331(87)90466-2},
 groups = {VM},
 issn = {0141-9331},
 journal = {ACM},
 pages = {562},
 title = {The design and evaluation of a high performance Smalltalk system},
 volume = {11},
 year = {1987}
}

@article{Agesen1997,
 author = {Ole Agesen},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1002/(sici)1096-9942(1997)3:2<127::aid-tapo4>3.0.co;2-s},
 groups = {VM},
 issn = {1074-3227},
 journal = {THEORY AND PRACTICE OF OBJECT SYSTEMS},
 pages = {127-155},
 title = {Design and implementation of Pep, a Java Just-In-Time translator},
 volume = {3},
 year = {1997}
}

@article{Agesen2010,
 author = {Ole Agesen and Alex Garthwaite and Jeffrey Sheldon and Pratap Subrahmanyam},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/1899928.1899930},
 groups = {VM},
 issn = {0163-5980},
 journal = {SIGOPS Oper. Syst. Rev.},
 pages = {3-18},
 title = {The evolution of an x86 virtual machine monitor},
 volume = {44},
 year = {2010}
}

@misc{Antero1998,
 author = {Taivalsaari Antero and Taivalsaari Antero},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1.1.23.6391},
 groups = {VM},
 journal = {SUN MICROSYSTEMS LABORATORIES SUN MICROSYSTEMS INC. 901 SAN ANTONIO ROAD PALO ALTO CA 94303},
 title = {Implementing a Java Virtual Machine in the Java Programming Language},
 year = {1998}
}

@article{Arnold2000,
 author = {Matthew Arnold and Stephen Fink and David Grove and Michael Hind and Peter F. Sweeney},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/353171.353175},
 groups = {VM},
 journal = {OOPSLA},
 title = {Adaptive optimization in the Jalapeno JVM},
 year = {2000}
}

@article{Bacon1996,
 author = {David F. Bacon and Peter F. Sweeney},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/236338.236371},
 groups = {VM},
 issn = {0362-1340},
 journal = {OOPSLA},
 pages = {324-341},
 title = {Fast static analysis of C++ virtual function calls},
 volume = {31},
 year = {1996}
}

@article{Bell1973,
 author = {James R. Bell},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/362248.362270},
 groups = {VM},
 issn = {0001-0782},
 journal = {ACM},
 pages = {370-372},
 title = {Threaded code},
 volume = {16},
 year = {1973}
}

@inproceedings{Blackburn2004,
 author = {Stephen M. Blackburn and Perry Cheng and Kathryn S. McKinley},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 biburl = {https://dblp.org/rec/conf/icse/BlackburnCM04.bib},
 booktitle = {26th International Conference on Software Engineering {(ICSE} 2004), 23-28 May 2004, Edinburgh, United Kingdom},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1109/ICSE.2004.1317436},
 editor = {Anthony Finkelstein and Jacky Estublier and David S. Rosenblum},
 groups = {VM},
 pages = {137--146},
 publisher = {{IEEE} Computer Society},
 title = {Oil and Water? High Performance Garbage Collection in Java with MMTk},
 year = {2004}
}

@article{Bolz2009,
 author = {Carl Friedrich Bolz and Antonio Cuni and Maciej Fijalkowski and Armin Rigo},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/1565824.1565827},
 groups = {VM},
 journal = {ICOOOLPS},
 title = {Tracing the meta-level: PyPy's tracing JIT compiler},
 year = {2009}
}

@article{Bolz2011,
 author = {Carl Friedrich Bolz and Antonio Cuni and Maciej Fija≈Çkowski and Michael Leuschel and Samuele Pedroni and Armin Rigo},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/2069172.2069181},
 groups = {VM},
 journal = {ICOOOLPS},
 title = {Runtime feedback in a meta-tracing JIT for efficient dynamic languages},
 year = {2011}
}

@article{Burke1999,
 author = {Michael G. Burke and John Whaley and Jong-Deok Choi and Stephen Fink and David Grove and Michael Hind and Vivek Sarkar and Mauricio J. Serrano and V. C. Sreedhar and Harini Srinivasan},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/304065.304113},
 groups = {VM},
 journal = {JAVA},
 title = {The Jalapeno dynamic optimizing compiler for Java},
 year = {1999}
}

@article{Bush1987,
 author = {William R. Bush and A. Dain Samples and David Ungar and Paul N. Hilfinger},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->

*[08/12/2020]:*

Goal of SOAR (Smalltalk On A RISC) is to produce a high-performance Smalltalk-80 execution language. It can attain high performance on a modified reduced instruction set architecture. The most important optimization is the removal of a layer of interpretation, compiling the bytecoded virtual machine instructions into low-level, register-based hardware instructions.

The Smalltalk-80 virtual machines executes *stack-based instructions* called **bytecodes**. An alternative is to compile **bytecodes** to native machine instructions directly. The SOAR approach consists of compiling all methods from *bytecodes* into **SOAR instructions**, therefor discarding the *bytecodes*. 

The basic task of the compiler is to translate *stack-oriented bytecodes* into **RISC-style loads, stores, and other register-based instructions**. It does this by *assigning Smalltalk variables and stack locations to registers and memory locations*, and then *simulating at compile time the bytecode stack operations on a symbolic stack*, converting the operations into SOAR instructions.

The RISC architecture presents a register file of overlapping register windows, each window corresponding to a procedure activation frame allocated in a stack discipline. The SOAR hardware uses a **window size of 16 registers with 8-register overlap**. Each window is divided into two identical sets of 8 registers, a **high set** (15-8) and a **low set** (7-0). Each set contains **6 general purpose registers and 2 dedicated registers** used for **return addresses** (15 and 7) and **return values** (14 and 6).

*FIGURE 2 PROVIDES A VERY GOOD INSIGHT*

When more registers are required than available, **spilling** is necessary. Spilling comes with two rules: (1) **Entire categories of variables are spilled if necessary** (arguments for example) (2) **A variable cannot be moved once it has been allocated a location**. These rules are not optimized in terms of register space usage but are simple and spilling is *minimized at reasonable cost*. Spills can either be *allocated from a common spill pool* or a separate *spill object can be allocated for each activation frame that spills*.

SOAR takes advantage of the fact that all simple arithmetic operations are performed only on integers. If incorrect, the hardware will **trap** and transfer to a handler that will **look-up** the correct method. The compiler also takes advantage of hardware that **maps registers to memory addresses** and allows **pointers to registers**.},
 doi = {10.1145/36205.36192},
 groups = {VM, Read},
 issn = {0362-1340},
 journal = {ACM},
 keywords = {read},
 pages = {112-116},
 readstatus = {read},
 title = {Compiling Smalltalk-80 to a RISC},
 volume = {22},
 year = {1987}
}

@article{Chambers1989,
 author = {C. Chambers and D. Ungar and E. Lee},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/74877.74884},
 groups = {VM},
 journal = {ACM},
 title = {An efficient implementation of SELF a dynamically-typed object-oriented language based on prototypes},
 year = {1989}
}

@inproceedings{Chambers1989a,
 author = {Craig Chambers and David M. Ungar},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 biburl = {https://dblp.org/rec/conf/pldi/ChambersU89.bib},
 booktitle = {Proceedings of the {ACM} SIGPLAN'89 Conference on Programming Language Design and Implementation (PLDI), Portland, Oregon, USA, June 21-23, 1989},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/73141.74831},
 editor = {Richard L. Wexelblat},
 groups = {VM},
 pages = {146--160},
 publisher = {{ACM}},
 title = {Customization: Optimizing Compiler Technology for SELF, a Dynamically-Typed Object-Oriented Programming Language},
 year = {1989}
}

@article{Chambers2004,
 author = {Craig Chambers and David Ungar},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/989393.989425},
 groups = {VM},
 issn = {0362-1340},
 journal = {SIGPLAN},
 pages = {295-312},
 title = {A Retrospective on "Customization: Optimizing Compiler Technology for Self, a Dynamically-Typed Object-Oriented Programming Language"},
 volume = {39},
 year = {2004}
}

@article{Cheng2001,
 author = {Perry Cheng and Guy E. Blelloch},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/378795.378823},
 groups = {VM},
 journal = {PLDI},
 title = {A parallel, real-time garbage collector},
 year = {2001}
}

@article{Click1995,
 author = {Cliff Click and Michael Paleczny},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/202529.202534},
 groups = {VM},
 journal = {IR},
 title = {A simple graph-based intermediate representation},
 year = {1995}
}

@article{Click2002,
 author = {Cliff Click and John Rose},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/583810.583821},
 groups = {VM},
 journal = {JGI},
 title = {Fast subtype checking in the HotSpot JVM},
 year = {2002}
}

@article{Click2005,
 author = {Cliff Click and Gil Tene and Michael Wolf},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/1064979.1064988},
 groups = {VM},
 journal = {VEE},
 title = {The pauseless GC algorithm},
 year = {2005}
}

@article{Dean,
 author = {Jeffrey Dean and David Grove and Craig Chambers},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1007/3-540-49538-x_5},
 groups = {VM},
 journal = {ECOOP},
 pages = {77-101},
 title = {Optimization of Object-Oriented Programs Using Static Class Hierarchy Analysis},
 year = {1995}
}

@inproceedings{Dehnert2003,
 author = {James C. Dehnert and Brian Grant and John P. Banning and Richard Johnson and Thomas Kistler and Alexander Klaiber and Jim Mattson},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 biburl = {https://dblp.org/rec/conf/cgo/DehnertGBJKKM03.bib},
 booktitle = {1st {IEEE} / {ACM} International Symposium on Code Generation and Optimization {(CGO} 2003), 23-26 March 2003, San Francisco, CA, {USA}},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1109/CGO.2003.1191529},
 editor = {Richard Johnson and Tom Conte and Wen{-}mei W. Hwu},
 groups = {VM},
 pages = {15--24},
 publisher = {{IEEE} Computer Society},
 title = {The Transmeta Code Morphing - Software: Using Speculation, Recovery, and Adaptive Retranslation to Address Real-Life Challenges},
 year = {2003}
}

@article{Deutsch1984,
 author = {L. Peter Deutsch and Allan M. Schiffman},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/800017.800542},
 groups = {VM},
 journal = {ACM},
 title = {Efficient implementation of the smalltalk-80 system},
 year = {1984}
}

@article{Dewar1975,
 author = {Robert B. K. Dewar},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/360825.360849},
 groups = {VM},
 issn = {0001-0782},
 journal = {ACM},
 pages = {330-331},
 title = {Indirect threaded code},
 volume = {18},
 year = {1975}
}

@article{Diehl2000,
 author = {Stephan Diehl and Pieter Hartel and Peter Sestoft},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1016/s0167-739x(99)00088-6},
 groups = {VM},
 issn = {0167-739X},
 journal = {FGCS},
 pages = {739-751},
 title = {Abstract machines for programming language implementation},
 volume = {16},
 year = {2000}
}

@article{Duboscq2014,
 author = {Gilles Duboscq and Thomas W√ºrthinger and Hanspeter M√∂ssenb√∂ck},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/2647508.2647521},
 groups = {VM},
 journal = {PPPJ},
 title = {Speculation without regret reducing deoptimization meta-data in the Graal compiler},
 year = {2014}
}

@misc{Eckert2013,
 author = {Marcel Eckert and Igor Podebrad and Bernd Klauer},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->

*[15/12/2020]*

Prevention against **Direct Memory Access (DMA)** attacks adding a **watchdog mechanism** that scans the data passing by and interrupts the processor after the detection of a malicious data or instruction sequence.

*REFERENCES TO OTHER ARTICLES IN THE FIELD OF PROCESSOR SECURITY*

[1] Chhabra et al., *An analysis of secure processor architectures*

[2] Wang et al., *Computer Architecture and Security: Fundamentals of Designing Secure Computer Systems*



DMA is a well-known technique to release processors from time consuming workload caused by simple data transfers. **Those transfers are performed without supervision**. Data and instruction are communicated between the memory as sink and source or between the memory and mass storage or interfaces. They reach their destination block-wise without completely before being checked by anti-malware agents. To complete the success of a DMA attack, **the attack pattern needs to launch the code before it has been checked** by the anti-malware agent. Another opportunity is to infect the **anti-malware** software directly.

The introduction of a **DMA-watchdog** can solve the issue. The watchdog resides between the *DMA-Controller* and the *Memory Controller*. It supervises the data part of the memory-bus with a number of sensors that provide a pattern matching functionality to identify malware. If one of the sensors is matching, it signals the watchdog that will, in turn, block the current DMA-transfer. The pattern matching is performed in parallel.

*PRHS (Partially Reconfigurable Heterogeneous System)* framework used to deploy the project on FPGA. 

*DESCRIPTION AND FIGURE*

**Proof-of-concept**: A DMA Simulator is added to the secondary data bus of the system and to the RAM via an SD-Arbiter. Its task is to *copy the content of internal Block-RAM (8KiB) to a given RAM address*. It does not take additional CPU time as it is completely independent.

},
 doi = {10.1007/978-3-642-40779-6_12},
 groups = {Hardware, Security, Read},
 issn = {0302-9743},
 pages = {145-151},
 title = {Hardware Based Security Enhanced Direct Memory Access},
 year = {2013}
}

@phdthesis{Eckert2014,
 address = {Hamburg},
 author = {Michael Marcel Eckert},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 editor = {Bernd Klauer},
 groups = {VM},
 pagetotal = {VI, 152},
 ppn_gvk = {784113750},
 title = {FPGA-based system virtual machines},
 year = {2014}
}

@article{Ertl1995,
 author = {M. Anton Ertl},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->

*[15/12/2020]*

While interpreters are used for their *simplicity* and *portability*, the question of *performance* rises and along it the question of the stack vs register architecture.

The **interpretation of a virtual machine instruction** consists of three parts: (1) **access the arguments** of the instruction, (2) **perform the function** of the instruction and (3) **dispatch (fetch, decode and start) the next instruction**. The *first* and *third* parts constitute the interpreter overhead.

The most efficient method for fetching, decoding and starting the next instruction is **direct threading**: instructions are represented by the *addresses of the routine* that implements them, and *instruction dispatch consists of fetching that address and jumping to the routine*. However, direct threading cannot be implemented in ANSI C but are replaced by either a **giant switch** or **calls**. The overhead induced by the two methods is due to the [range check/table lookup/jump] routine of the *switch method* and the fact that every virtual machine register (instruction and stack pointers) have to be kept in global or static variables for the *call method*. In the *switch method*, the virtual registers can be kept as local variables.

If the instructions are of constant length, the **dispatch of the next instruction can be performed in parallel with the processing of the current instruction**.  In addition, the overhead can also be reduced by **reducing the number of primitives executed**, i.e. by *increasing the semantic content of each instruction*. Combining often-used instruction sequences into one instruction or specializing an instruction for a frequent constant argument are well-known techniques.

While on the hardware side the contest between stack and registers is won by registers, the discussion is different for interpreters. **Data flow analysis** to perform the best register allocation is expensive and the **spill** are much more time consuming than in hardware. Moreover, in hardware the register numbers are decoded in parallel whereas a simple software implementation has to fetch and/or decode the register numbers using separate instructions.

**If there are enough registers, the number of operands fetches and stores can  be reduced by keeping n top-of-the-stack values in registers**.

Mapping a constant number of items in registers is simple but unnecessary. It would be better to keep a *varying number of items in registers*, on an on-demand basis (like a **cache**).

Every allowed mapping of stack items to machine registers constitutes a **cache state**. Many stack pointer updates can be optimized: the cache state can hold the information on how much the contents of the stack pointer vary from the actual value of the stack pointer (this difference can correspond to the number of stack items in the cache). This means the stack pointer does not need to be updated when an instruction can access all stack items in registers.

There should be one state for every number of stack items in registers. The bottom of the cached stack items should be in all states and the other stack items allocated similarly. This avoids the need to move stack items around the bottom of the cache when something on the top changes. 



},
 doi = {10.1145/207110.207165},
 groups = {VM},
 journal = {SIGPLAN},
 title = {Stack caching for interpreters},
 year = {1995}
}

@article{Ertl2002,
 author = {M. Anton Ertl and David Gregg and Andreas Krall and Bernd Paysan},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 biburl = {https://dblp.org/rec/journals/spe/ErtlGKP02.bib},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1002/spe.434},
 groups = {VM},
 journal = {Softw. Pract. Exp.},
 number = {3},
 pages = {265--294},
 title = {Vmgen: a generator of efficient virtual machine interpreters},
 volume = {32},
 year = {2002}
}

@article{Ertl2003,
 author = {M. Anton Ertl and David Gregg},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/781131.781162},
 groups = {VM},
 journal = {ACM Transactions on Programming Languages and Systems},
 title = {Optimizing indirect branch prediction accuracy in virtual machine interpreters},
 year = {2003}
}

@article{Ertl2004,
 author = {M. Anton Ertl and David Gregg},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/1059579.1059583},
 groups = {VM},
 journal = {IVME},
 title = {Combining stack caching with dynamic superinstructions},
 year = {2004}
}

@article{Ertl2005,
 author = {M. Anton Ertl},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1016/j.scico.2005.04.001},
 groups = {VM},
 issn = {0167-6423},
 journal = {SCP},
 pages = {251-252},
 title = {Advances in interpreters, virtual machines and emulators},
 volume = {57},
 year = {2005}
}

@article{Faes,
 author = {P. Faes and M. Christiaens and D. Buytaert and D. Stroobandt},
 comment = {<!-- Please prefix the notes with the date as in "[22/12/2020]:" -->

*[08/12/2020]:*

This paper presents a virtual machine, based on the *Jikes Research Virtual Machine* (Jalapeno), that is able to bridge the gap by providing the same capabilities to hardware components as to software components. This integration is achieved by introducing an **architecture and protocol that allow reconfigurable hardware and software to communicate with each other in a transparent manner *i.e.* no component of the design needs to be aware whether other components are implemented in hardware or in software.** It also allows reconfigurable hardware to manage dynamically allocated memory.

Granting the same capabilities to HW as SW with regard to object references highlights three advantages:

- The number of HW registers can be limited. Instead of passing a large number of parameters, a reference to an object that contains the required data can be provided.
- Neither the HW or SW needs to know in what type of memory the object actually resides. The JVM runtime can implement heuristics that place data closer to the computing unit that is likely to use it in the near future.
- Calling a method, whether it is implemented in SW or HW is completely transparent. This allows a HW method to perform the same operations as a SW method, call methods of any of its arguments or pass them on to other methods.



**Architecture:** The reconfigurable computing device is modeled as a *shared memory machine.* *The address space of the HW is mapped into the address space of the JVM.* This way, the *JVM can access memory and control the registers of the HW* while the *HW can access the JVM's heap through Direct Memory Access.*

**Protocol:** A region is used for *garbage collection* and has a one-to-one mapping to the internal RAM for object references. *Method parameters* and *return values* are mapped arbitrarily onto addresses in the internal RAM for primitive datatypes or the internal RAM itself for object references. The rest of the addresses are *control registers* and are not mapped onto RAM but are either ignored or directly connected to HW registers.

*USE CASE FROM THE PAPER IS A GOOD SUMMARY*

***Garbage-Collector:*** The runtime system collects unused objects in the heap by conducting a liveness check (through an *object-reference graph*) and compacting the resulting memory to create a contiguous region of unused memory. This type of GC is called "stop-the-world". 

The GC in the HW/SW system needs to send a *pause* signal to each HW entity and then *resume* them once finished. This can be done because the GC has access to a list of all available HW entities (note that pausing is required so that no reference is changed, primitive computation can continue). The object references on the HW side can either be in the RAM (that is directly mapped to the garbage collector region) or hidden and fragmented in many different small RAMs or in registers. When a pause is requested, the HW needs to expose those regions by copying them into the GC region. 



***Results:*** Impact of GC is limited to an additional 2.32% execution time 

 

},
 doi = {10.1109/fpl.2005.1515811},
 groups = {VM, Read},
 journal = {IEEE},
 title = {FPGA-aware garbage collection in Java},
 year = {2005}
}

@inproceedings{Fink2003,
 author = {Stephen J. Fink and Feng Qian},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 biburl = {https://dblp.org/rec/conf/cgo/FinkQ03.bib},
 booktitle = {1st {IEEE} / {ACM} International Symposium on Code Generation and Optimization {(CGO} 2003), 23-26 March 2003, San Francisco, CA, {USA}},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1109/CGO.2003.1191549},
 editor = {Richard Johnson and Tom Conte and Wen{-}mei W. Hwu},
 groups = {VM},
 pages = {241--252},
 publisher = {{IEEE} Computer Society},
 title = {Design, Implementation and Evaluation of Adaptive Recompilation with On-Stack Replacement},
 year = {2003}
}

@article{Fournier2020,
 author = {Emilien Fournier and Ciprian Teodorov and Loic Lagadec},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->

*[08/12/2020]*

Menhir is a modular hardware model-checker. Menhir decouples the verification core from the modeling language semantics by introducing a generic language-agnostic verification interface (**GLI**). Menhir provides a *polymorphic verification core*. It offers a **pure hardware configuration** (VHDL-based GLI-specific modeling language) as well as a **system-on-chip (SoC) configuration** (existing software implementation of the modeling language). Two system specification are handled, **DVE** as well as **EMI** and six verification algorithms.

**Explicit state online model checking for regular safety specifications.**

The verification algorithm is built upon a model. The model is represented as follows:

```pseudocode
structure M (C: Type) :=
	(initial : set C)
	(next    : C -> set C)
	(is_safe : C -> bool)
```

where `M` is the model over an arbitrary configuration `C`. `initial` is the set of the initial configurations, `next` outputs a set of configurations given a specific one and `is_safe` checks that a given configuration is safe. 



The verification algorithm itself is presented as follows:

``` pseudocode
def safety_checker (m: M) : bool :=
	K <- {}
	F <- {}
	N <- m.initial
	do
		if there is n in N such as not(m.is_safe(n)) 
			then return false
		K, F <- KuN, N\K
	while not(F is empty)
	return true
```

where `K` is the known set and `F` the frontier. `K` stores the states encountered while `F` only stores the configurations discovered recently that HAVE NOT yet been processed. The algorithm starts by populating the `N` set with the initial states. The states in the `N` set are checked for safety and the next states are added to `F` and `K`.  If an unsafe configuration is found, the algorithm stops.

*LOOK AT FIGURE 1 FOR ARCHITECTURE OVERVIEW*

Model-checker organized in two parametric layers: ***Model Frontend*** containing *Next State Generator* and *Invariant Checker* and ***Storage Backend*** that contains the *Frontier FIFO* and *Known Set*. Between the two parts is the **GLI** which mediates the dialogue from the *Frontend* to the *Controller*. The *Controller* itself is composed of the *Next Controller* (access to the **GLI**),  the *Scheduler* (forwards the newly discovered configurations) and the *Termination Checker* (monitors the progression). 

The call to `is_safe` is inlined into the `next` instruction to reduce the call cost. 

*LOOK AT FIGURE 2 FOR GLI SPECS*

*LOOK AT FIGURE 3 FOR ALGORITHM POSSIBILITIES*

},
 doi = {10.1109/dsd51259.2020.00022},
 groups = {Verification, Hardware, Read},
 title = {Menhir: Generic High-Speed FPGA Model-Checker},
 year = {2020}
}

@article{Frampton2009,
 author = {Daniel Frampton and Stephen M. Blackburn and Perry Cheng and Robin J. Garner and David Grove and J. Eliot B. Moss and Sergey I. Salishev},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/1508293.1508305},
 groups = {VM},
 journal = {VEE},
 title = {Demystifying magic: high-level low-level programming},
 year = {2009}
}

@article{Franz1997,
 author = {Michael Franz and Thomas Kistler},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/265563.265576},
 groups = {VM},
 issn = {0001-0782},
 journal = {Communications of the ACM},
 pages = {87-94},
 title = {Slim binaries},
 volume = {40},
 year = {1997}
}

@article{Freudenberg2014,
 author = {Bert Freudenberg and Dan H. H. Ingalls and Tim Felgentreff and Tobias Pape and Robert Hirschfeld},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/2661088.2661100},
 groups = {VM},
 journal = {DLS},
 title = {SqueakJS: a modern and practical smalltalk that runs in any browser},
 year = {2014}
}

@article{Gal2006,
 author = {Andreas Gal and Christian W. Probst and Michael Franz},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/1134760.1134780},
 groups = {VM},
 journal = {VEE},
 title = {HotpathVM: an effective JIT compiler for resource-constrained devices},
 year = {2006}
}

@article{Gosling1995,
 author = {James Gosling},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->

*[06/01/2021]*

Java emerged from its divergences with C++ by using a compiler to generate byte coded machine independent instructions. While this type of method is usually unsuitable for higher-level manipulation, some twists are used: unusual amount of **type information**, **restrictions on the use of the operand stack** and heavy reliance on **symbolic references** and **on-the-fly code rewriting**. 

Instruction definitions follow this inductive property: *Given only the type state before the execution of the instruction, the type state afterwards is determined*.  Smalltalk or PostScript stack-based codes do not have this property. The main idea behind this specification is **simplicity**.

In conjunction, instructions follow the property: *When there are two execution paths into the same point, they must arrive there with exactly the same type state*. This means that bytecode generators cannot write loops that iterate through arrays copying each element on the stack. Since all paths to a point are required to arrive with the same type state, then the type state from any incoming path can be used to do further manipulations.

These restrictions allow a number of important consequences:

- **Static checkability**: The last phase of the bytecode loader is the **verifier**, it traverses the bytecode, constructs type state information and verifies the type parameters of all opcodes. Once the **verifier** finishes, it is guaranteed that: there are no operand stack overflows or underflows, the types of the parameters of opcodes is correct, no illegal data conversions are done and object field accesses are legal. It helps the interpreter and provides a secure environment (no pointer can be forged, access restrictions are enforced, etc.).
- **Fragile Superclasses**: Java uses symbolic references to answer the issue. For example, the `getfield` opcode does not use an offset into the object but rather an index into the symbol table. Once the class is loaded, the offset into the object does not change. When the `getfield` opcode is executed, the interpreter looks up the symbol, finds its offset then rewrites the instruction to be a quick `getfield` with the exact offset.
- **Portability**: Compiled programs are portable given the end device has an interpreter.
- **Translation to machine code**: The static nature of the type states enable simple on-the-fly translation of bytecodes into machine code (no dynamic checks or inferences).



A deterministic stack type-state restriction and a bytecode IR allow the bytecoded program to be compact then directly interpreted or translated to machine code. The implementation of these manipulations can be simple, fast and small.},
 doi = {10.1145/202529.202541},
 groups = {VM},
 journal = {ACM SIGPLAN Workshop onIntermediate Representations},
 subtitle = {ACM SIGPLAN workshop on intermediate representations (IR'95)},
 title = {Java intermediate bytecodes},
 year = {1995}
}

@inproceedings{Grimmer2015,
 author = {Matthias Grimmer and Chris Seaton and Thomas W{\"{u}}rthinger and Hanspeter M{\"{o}}ssenb{\"{o}}ck},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 biburl = {https://dblp.org/rec/conf/aosd/GrimmerSWM15.bib},
 booktitle = {Proceedings of the 14th International Conference on Modularity, {MODULARITY} 2015, Fort Collins, CO, USA, March 16 - 19, 2015},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/2724525.2728790},
 editor = {Robert B. France and Sudipto Ghosh and Gary T. Leavens},
 groups = {VM},
 pages = {1--13},
 publisher = {{ACM}},
 title = {Dynamically composing languages in a modular way: supporting {C} extensions for dynamic languages},
 year = {2015}
}

@article{Gunadi2015,
 abstract = {Android is an operating system that has been used in a majority of mobile devices. Each application in Android runs in an instance of the Dalvik virtual machine, which is a register-based virtual machine (VM). Most applications for Android are developed using Java, compiled to Java bytecode and then translated to DEX bytecode using the dx tool in the Android SDK. In this work, we aim to develop a type-based method for certifying non-interference properties of DEX bytecode, following a methodology that has been developed for Java bytecode certification by Barthe et al. To this end, we develop a formal operational semantics of the Dalvik VM, a type system for DEX bytecode, and prove the soundness of the type system with respect to a notion of non-interference. We then study the translation process from Java bytecode to DEX bytecode, as implemented in the dx tool in the Android SDK. We show that an abstracted version of the translation from Java bytecode to DEX bytecode preserves the non-interference property. More precisely, we show that if the Java bytecode is typable in Barthe et al's type system (which guarantees non-interference) then its translation is typable in our type system. This result opens up the possibility to leverage existing bytecode verifiers for Java to certify non-interference properties of Android bytecode.},
 archiveprefix = {arXiv},
 author = {Hendra Gunadi and Alwen Tiu and Rajeev Gore},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 eprint = {1504.01842},
 file = {:http\://arxiv.org/pdf/1504.01842v5:PDF},
 groups = {VM},
 journal = {arXiv},
 keywords = {cs.PL},
 month = {Apr},
 primaryclass = {cs.PL},
 title = {Formal Certification of Android Bytecode},
 year = {2015}
}

@article{Hoelzle,
 author = {Urs H√∂lzle and Craig Chambers and David Ungar},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->

*[08/12/2020]:*

Historically, dynamically-typed object-oriented languages have run much slower than statically-typed languages. Techniques such as **type analysis**

[^1]: The compiler can "predict" the type of the receiver based on the message name and insert a runtime check before the message. It usually allows for later inlining based on the most frequent type. The type can be propagated through the control flow graph and can use type casing with several branches corresponding to the possible types and their version of the inlined method. 

, **customization**

[^2]: Extends dynamic compilation by exploiting the fact that many messages within a method are sent to `self`. The compiler creates a separate compiled version of a given source method for each receiver type. This duplication allows for customization. In particular, knowing the type of `self` at compile time allows all `self` sends to be inlined without any type tests. Customization can also be applied to global variable, instance variable for example.

, and **splitting** 

[^3]: Turns a polymorphic message into several separate monomorphic messages and avoids tests by copying parts of the control flow graph.

 have been shown to be very effective in reducing this disparity.

A new acceleration approach is presented: ***Polymorphic Inline Caches (PICs)*** that provide both an improvement of the efficiency of message sends and valuable type information that can be reused to conduct by the compiler to produce other optimizations.

Smalltalk code is dynamically compiled and machine code is cached. Method lookup is responsible for a substantial part of the execution time. **Lookup caches** reduce the overhead by mapping (Receiver types - Message name) pairs to methods and holding to the most recently used result. **Inline caches** use the fact that the type of the receiver at a given call site rarely varies and caches the looked-up method address at the call site, overwriting the call instruction.

Polymorphic sends have to be handled differently because using a simple inline cache would result in a permanent overwriting of the method address (due to the changing type) and therefore an additional call to the expensive lookup method. 

Sends are either:

- ***Monomorphic:*** one receiver type (1)
- ***Polymorphic:*** a few receiver types (2-10)
- ***Megamorphic:*** a lot of receiver types (10+)

A ***PIC*** will cache ALL lookup results for a given polymorphic call-site in a specially-generated stub routine that looks like the following after few calls of the method on different receiver types:

```pseudocode
if type = type1:						   |  Check receiver type
	jump to method     ___________________ | _______________________
										   | Code to apply on type 1
										   
if type = type2:                           | Check receiver type
	jump to method     ___________________ | _______________________
										   | Code to apply on type 2
	
call lookup            ___________________ | Fallback: call expensive lookup
```

A ***PIC*** is therefore an *extensible cache with no cache in which no cache item is ever displaced by another (newer) item*.

Remaining problems and possible solutions:

- **Megamorphic sends handling:** The inline cache miss handler should not extend the ***PIC*** beyond a certain number of type cases. It should mark the call-site as megamorphic and adopt a fallback strategy.
- **Linear search improvement:** If the dynamic usage frequency of each type were available, ***PICs*** could be reordered periodically to move the most frequently occurring types on top.
- **Short methods inlining:** Many methods are very small (*e.g*. output one of the receiver's instance variable). Such methods could be integrated into the ***PIC*** directly rather than being called by it.
- **Space efficiency improvement:** If the system runs on tight space, call sites with identical message names could share a common ***PIC*** to reduce the space overhead.},
 doi = {10.1007/bfb0057013},
 groups = {VM, Read},
 journal = {ECCOP Proceedings},
 pages = {21-38},
 title = {Optimizing dynamically-typed object-oriented languages with polymorphic inline caches},
 year = {1991}
}

@article{Hoelzle1992,
 author = {Urs H√∂lzle and Craig Chambers and David Ungar},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/143095.143114},
 groups = {VM},
 journal = {ACM},
 pages = {32-43},
 title = {Debugging optimized code with dynamic deoptimization},
 year = {1992}
}

@article{Hoelzle1994,
 author = {Urs H√∂lzle and David Ungar},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/191081.191116},
 groups = {VM},
 issn = {0362-1340},
 journal = {OOPSLA},
 pages = {229-243},
 title = {A third-generation SELF implementation: reconciling responsiveness with performance},
 volume = {29},
 year = {1994}
}

@phdthesis{Hoelzle1994a,
 author = {Urs H√∂lzle},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 groups = {VM},
 title = {Adaptive Optimization for Self: Reconciling High Performance with Exploratory Programming},
 type = {phdthesis},
 year = {1994}
}

@article{Humer2015,
 author = {Christian Humer and Christian Wimmer and Christian Wirth and Andreas W√∂√ü and Thomas W√ºrthinger},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/2775053.2658776},
 groups = {VM, Read},
 issn = {0362-1340},
 journal = {GPCE},
 pages = {123-132},
 title = {A domain-specific language for building self-optimizing AST interpreters},
 volume = {50},
 year = {2015}
}

@article{Hussein2015,
 author = {Ahmed Hussein and Antony L. Hosking and Mathias Payer and Christopher A. Vick},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/2754169.2754182},
 groups = {VM},
 journal = {ISMM},
 title = {Don't race the memory bus: taming the GC leadfoot},
 year = {2015}
}

@article{Hussein2015a,
 author = {Ahmed Hussein and Mathias Payer and Antony Hosking and Christopher A. Vick},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/2757667.2757674},
 groups = {VM},
 journal = {SYSTOR},
 title = {Impact of GC design on power and performance for Android},
 year = {2015}
}

@article{Ingalls1997,
 author = {Dan Ingalls and Ted Kaehler and John Maloney and Scott Wallace and Alan Kay},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/263698.263754},
 groups = {VM},
 journal = {OOPSLA},
 title = {Back to the future: the story of Squeak, a practical Smalltalk written in itself},
 year = {1997}
}

@article{Kotzmann2008,
 author = {Thomas Kotzmann and Christian Wimmer and Hanspeter M√∂ssenb√∂ck and Thomas Rodriguez and Kenneth Russell and David Cox},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/1369396.1370017},
 groups = {VM},
 issn = {1544-3566},
 journal = {ACO},
 pages = {1-32},
 title = {Design of the Java HotSpot‚Ñ¢ client compiler for Java 6},
 volume = {5},
 year = {2008}
}

@article{Kulkarni2013,
 author = {S. Kulkarni and J. Cavazos and C. Wimmer and D. Simon},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1109/cgo.2013.6495004},
 groups = {VM},
 journal = {CGO},
 title = {Automatic construction of inlining heuristics using machine learning},
 year = {2013}
}

@article{Lima2020a,
 abstract = {Context. JavaScript is a popular programming language today with several implementations competing for market dominance. Although a specification document and a conformance test suite exist to guide engine development, bugs occur and have important practical consequences. Implementing correct engines is challenging because the spec is intentionally incomplete and evolves frequently. Objective. This paper investigates the use of test transplantation and differential testing for revealing functional bugs in JavaScript engines. The former technique runs the regression test suite of a given engine on another engine. The latter technique fuzzes existing inputs and then compares the output produced by different engines with a differential oracle. Method. We conducted experiments with engines from five major players-Apple, Facebook, Google, Microsoft, and Mozilla-to assess the effectiveness of test transplantation and differential testing. Results. Our results indicate that both techniques revealed several bugs, many of which confirmed by developers. We reported 35 bugs with test transplantation (23 of these bugs confirmed and 19 fixed) and reported 24 bugs with differential testing (17 of these confirmed and 10 fixed). Results indicate that most of these bugs affected two engines-Apple's JSC and Microsoft's ChakraCore (24 and 26 bugs, respectively). To summarize, our results show that test transplantation and differential testing are easy to apply and very effective in finding bugs in complex software, such as JavaScript engines.},
 archiveprefix = {arXiv},
 author = {Igor Lima and Jefferson Silva and Breno Miranda and Gustavo Pinto and Marcelo d'Amorim},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 eprint = {2012.03759},
 file = {:http\://arxiv.org/pdf/2012.03759v1:PDF},
 groups = {VM, Testing},
 journal = {Software Quality Journal 2021},
 keywords = {cs.SE},
 primaryclass = {cs.SE},
 title = {Exposing Bugs in JavaScript Engines through Test Transplantation and Differential Testing},
 year = {2020}
}

@inproceedings{Paleczny2001,
 author = {Michael Paleczny and Christopher A. Vick and Cliff Click},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 biburl = {https://dblp.org/rec/conf/jvm/PalecznyVC01.bib},
 booktitle = {Proceedings of the 1st Java Virtual Machine Research and Technology Symposium, April 23-24, 2001, Monterey, CA, {USA}},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 editor = {Saul Wold},
 groups = {VM},
 publisher = {{USENIX}},
 title = {The Java HotSpot Server Compiler},
 url = {http://www.usenix.org/publications/library/proceedings/jvm01/paleczny.html},
 year = {2001}
}

@article{Piumarta1998,
 author = {Ian Piumarta and Fabio Riccardi},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/277652.277743},
 groups = {VM},
 issn = {0362-1340},
 journal = {SIGPLAN},
 pages = {291-300},
 title = {Optimizing direct threaded code by selective inlining},
 volume = {33},
 year = {1998}
}

@article{Popek1974,
 author = {Gerald J. Popek and Robert P. Goldberg},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/361011.361073},
 groups = {VM},
 issn = {0001-0782},
 journal = {OSP},
 pages = {412-421},
 title = {Formal requirements for virtualizable third generation architectures},
 volume = {17},
 year = {1974}
}

@inproceedings{Rigo2006,
 author = {Armin Rigo and Samuele Pedroni},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 biburl = {https://dblp.org/rec/conf/oopsla/RigoP06.bib},
 booktitle = {Companion to the 21th Annual {ACM} {SIGPLAN} Conference on Object-Oriented Programming, Systems, Languages, and Applications, {OOPSLA} 2006, October 22-26, 2006, Portland, Oregon, {USA}},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/1176617.1176753},
 editor = {Peri L. Tarr and William R. Cook},
 groups = {VM, Read},
 pages = {944--953},
 publisher = {{ACM}},
 title = {PyPy's approach to virtual machine construction},
 year = {2006}
}

@article{Rohou2012,
 author = {Erven Rohou},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1109/icppw.2012.58},
 groups = {VM},
 journal = {41st International Conference on Parallel Processing Workshops.},
 title = {Tiptop: Hardware Performance Counters for the Masses},
 year = {2012}
}

@article{Rohou2015,
 author = {Erven Rohou and Bharath Narasimha Swamy and Andre Seznec},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1109/cgo.2015.7054191},
 groups = {VM},
 journal = {CGO},
 title = {Branch prediction and the performance of interpreters, Don't trust folklore},
 year = {2015}
}

@inproceedings{Russell2006,
 author = {Kenneth Russell and David Detlefs},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 biburl = {https://dblp.org/rec/conf/oopsla/RussellD06.bib},
 booktitle = {Proceedings of the 21th Annual {ACM} {SIGPLAN} Conference on Object-Oriented Programming, Systems, Languages, and Applications, {OOPSLA} 2006, October 22-26, 2006, Portland, Oregon, {USA}},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/1167473.1167496},
 editor = {Peri L. Tarr and William R. Cook},
 groups = {VM},
 pages = {263--272},
 publisher = {{ACM}},
 title = {Eliminating synchronization-related atomic operations with biased locking and bulk rebiasing},
 year = {2006}
}

@article{Sachindran2004,
 author = {Narendran Sachindran and J. Eliot B. Moss and Emery D. Berger},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/1028976.1028984},
 groups = {VM},
 journal = {OOPSLA},
 title = {MC2: high-performance garbage collection for memory-constrained environments},
 year = {2004}
}

@article{Samples1986,
 author = {A. Dain Samples and David Ungar and Paul Hilfinger},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/28697.28708},
 groups = {VM},
 journal = {ACM},
 title = {SOAR: Smalltalk without bytecodes},
 year = {1986}
}

@article{Seaton2014,
 author = {Chris Seaton and Michael L. Van De Vanter and Michael Haupt},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/2617548.2617550},
 groups = {VM},
 journal = {DYLA},
 title = {Debugging at Full Speed},
 year = {2014}
}

@article{Shaylor2003,
 author = {Nik Shaylor and Douglas N. Simon and William R. Bush},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->

**The size of Java classfiles** has long been recognized as an issue, especially for embedded devices. Several methods exist to reduce the size, both as a transmission format and as an execution format. Some methods try to perturb the Java execution engine as little as possible while the **Java Card Paradigm introduces a muscular transformer between classfiles and interpreter.**

The project‚Äôs main goal of building a CLDC-compliant system on a small device led to a few straightforward consequent goals, namely *minimizing the size of transmitted classfiles*, the *RAM needed for classfile loading*, the *size of loaded classfiles*, the *RAM required during execution*, and the *size of the interpreter and memory system*.

These goals are then translated in design choices:

- Standard CLDC classfiles are too large and complex. Using a **Java Card** technique, they are **preprocessed off-device** and packaged in a smaller representation (*suite*) that can be verified and loaded on-device.
- The **classfile preprocesor** identifies code snippets that are hard to verify or garbage collect and translates them into simpler versions
- Standard classfiles contain symbolic information for resolving references. **References are now resolved before execution**, either during off-device translation or during the installation of suites on the device.
- Standard construction and **object initialization is recasted** into an equivalent form that can be verified more efficiently
- Three memory spaces are available with different characteristics. A **region-aware memory manager** is therefore used.



Bytecode verification and exact garbage collection are complex on small devices, especially due to the fact that pointers are hard to find and track. While CLDC added a classfile attribute called a *stackmap*, it is too complex and memory intensive. Specific restrictions are added to the translator and applied when the conversion from classfiles to *suites* is performed:

- **A local variable can only hold one type**
- **The evaluation stack must be empty at the end of a basic block**
- **Bytecodes that can trigger a GC may only be executed when the evaluation stack contains only the operands for those bytecodes**



A compact bytecode set is used with **reduced operand field sizes** that can then be extended (8 bits by default but that can be extended to 12, 16 or 32). Local variables are explicitly typed so **no type-specific load and store are needed**. Symbolic references (through a name string rather than an index or pointer) are **resolved as much as possible** when they are written into the memory of the target device **during loading**. A **field access** can be resolved to an **absolute offset within an object**, a **method invocation** to an **offset in a vtable**. Simple two-pass verification process. First step reads the bytecode and verifies **type safety**, **class member references** and writes them in NVM. Second pass checks the **branch targets** are valid.

Standard Java object construction creates an *uninitialized* object and then fills it up. Squawk does not expose uninitialized object references to the bytecode. The **object method constructor creates the object and returns the address of the newly created object**. A *null* flag is used as the first parameter. A constructor will allocate an object and replace the first parameter only if that parameter is *null*.



**Memory:**

- Three memory spaces: *RAM*, *NVM* and *ROM*. Objects in less permanent memory are allowed to contain references to objets in more permanent memory but not the other way around.
- *Chunky stack* composed of chunks allocated in the *RAM heap*. Each chunk is a Java object and can be GC'd.
- Class definition information is divided into *immutable* and *mutable*. All objects have a one-word header pointing to the immutable class information for that object.
- *Object monitors* are used to implement synchronization. The monitors are placed in an LRU queue in RAM. All monitors keep a reference to their corresponding objects.

**Implementation:**

- *Methods* are *byte arrays*
- Every class contains a *reference to a byte array that contains an object pointer map* used by the GC
- A class state record is the mutable part of a class definition, it contains the object reference fields and the integer fields used to hold the static variables of the class. The class state records are kept in an LRU queue in the RAM.

Garbage collection is performed when the `interpret` method fails and outputs an `OutOfMemory` error. The `gc()` method is only called when it fails to allocate a stack chunk, when it fails to allocate an object or when it is explicitly called:

```java
for (;;) {
	interpret(result);
	result = gc();
}
```



},
 doi = {10.1145/780732.780738},
 groups = {VM, Read},
 journal = {LCTES},
 title = {A java virtual machine architecture for very small devices},
 year = {2003}
}

@article{Simon2015,
 author = {Doug Simon and Christian Wimmer and Bernhard Urban and Gilles Duboscq and Lukas Stadler and Thomas W√ºrthinger},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/2764907},
 groups = {VM},
 issn = {1544-3566},
 journal = {ACM},
 title = {Snippets: Taking the High Road to a Low Level},
 volume = {12},
 year = {2015}
}

@book{Smith2005,
 author = {James E. Smith and Ravi Nair},
 doi = {10.1016/b978-155860910-5/50009-4},
 groups = {VM},
 pages = {369-443},
 title = {System Virtual Machines},
 year = {2005}
}

@inproceedings{Stadler2014,
 author = {Lukas Stadler and Thomas W{\"{u}}rthinger and Hanspeter M{\"{o}}ssenb{\"{o}}ck},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 biburl = {https://dblp.org/rec/conf/cgo/StadlerWM14.bib},
 booktitle = {12th Annual {IEEE/ACM} International Symposium on Code Generation and Optimization, {CGO} 2014, Orlando, FL, USA, February 15-19, 2014},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 editor = {David R. Kaeli and Tipp Moseley},
 groups = {VM},
 pages = {165},
 publisher = {{ACM}},
 title = {Partial Escape Analysis and Scalar Replacement for Java},
 url = {https://dl.acm.org/citation.cfm?id=2544157},
 year = {2014}
}

@article{Ungar1984,
 author = {David Ungar and Ricki Blau and Peter Foley and Dain Samples and David Patterson},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/773453.808182},
 groups = {VM},
 issn = {0163-5964},
 journal = {IEEE},
 pages = {188-197},
 title = {Architecture of SOAR: Smalltalk on a RISC},
 volume = {12},
 year = {1984}
}

@article{Ungar1984a,
 author = {David Ungar},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/390010.808261},
 groups = {VM},
 issn = {0163-5948},
 journal = {IEEE},
 pages = {157-167},
 title = {Generation Scavenging: A non-disruptive high performance storage reclamation algorithm},
 volume = {9},
 year = {1984}
}

@article{Ungar1987,
 author = {David Ungar and Randall B. Smith},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/38765.38828},
 groups = {VM},
 journal = {ACM},
 title = {Self: The power of simplicity},
 year = {1987}
}

@article{Ungar1987b,
 author = {David M. Ungar and David A. Patterson},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 biburl = {https://dblp.org/rec/journals/computer/UngarP87.bib},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1109/MC.1987.1663359},
 groups = {VM},
 journal = {Computer},
 number = {1},
 pages = {67--74},
 title = {What Price Smalltalk?},
 volume = {20},
 year = {1987}
}

@article{Ungar2005,
 author = {David Ungar and Adam Spitz and Alex Ausch},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/1094855.1094865},
 groups = {VM},
 journal = {OOPSLA},
 title = {Constructing a metacircular Virtual machine in an exploratory programming environment},
 year = {2005}
}

@article{Vanter2015,
 author = {Michael L. Van De Vanter},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/2843915.2843917},
 groups = {VM},
 journal = {ICOOOLPS},
 title = {Building debuggers and other tools: we can "have it all"},
 year = {2015}
}

@phdthesis{Varoumas2019,
 author = {Steven Varoumas},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 biburl = {https://dblp.org/rec/phd/hal/Varoumas19.bib},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 groups = {VM},
 school = {Sorbonne University, Paris, France},
 title = {Mod{\`{e}}les de programmation de haut niveau pour microcontr{\^{o}}leurs {\`{a}} faibles ressources. (High-level programming models for microcontrollers with scarce resources)},
 url = {https://tel.archives-ouvertes.fr/tel-02426454},
 year = {2019}
}

@article{Wimmer2013,
 author = {Christian Wimmer and Michael Haupt and Michael L. Van De Vanter and Mick Jordan and Laurent Dayn√®s and Douglas Simon},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/2400682.2400689},
 groups = {VM},
 issn = {1544-3566},
 journal = {ACO},
 pages = {1-24},
 title = {Maxine: An approachable virtual machine for, and in Java},
 volume = {9},
 year = {2013}
}

@article{Woess2014,
 author = {Andreas W√∂√ü and Christian Wirth and Daniele Bonetta and Chris Seaton and Christian Humer and Hanspeter M√∂ssenb√∂ck},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/2647508.2647517},
 groups = {VM},
 journal = {PPPJ},
 title = {An object storage model for the truffle language implementation framework},
 year = {2014}
}

@inproceedings{wolczko1996self,
 author = {Wolczko, Mario},
 booktitle = {Workshop on Prototype-Based Languages, ECOOP ‚Äò96, Linz, Austria},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 groups = {VM},
 title = {self includes: Smalltalk},
 year = {1996}
}

@article{Wuerthinger2012,
 author = {Thomas W√ºrthinger and Andreas W√∂√ü and Lukas Stadler and Gilles Duboscq and Doug Simon and Christian Wimmer},
 doi = {10.1145/2384577.2384587},
 groups = {VM},
 journal = {DLS},
 title = {Self-optimizing AST interpreters},
 year = {2012}
}

@inproceedings{Wuerthinger2013,
 author = {Thomas W{\"{u}}rthinger and Christian Wimmer and Andreas W{\"{o}}{\ss} and Lukas Stadler and Gilles Duboscq and Christian Humer and Gregor Richards and Doug Simon and Mario Wolczko},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 biburl = {https://dblp.org/rec/conf/oopsla/WurthingerWWSDHRSW13.bib},
 booktitle = {{ACM} Symposium on New Ideas in Programming and Reflections on Software, Onward! 2013, part of {SPLASH} '13, Indianapolis, IN, USA, October 26-31, 2013},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1145/2509578.2509581},
 editor = {Antony L. Hosking and Patrick Th. Eugster and Robert Hirschfeld},
 groups = {VM},
 pages = {187--204},
 publisher = {{ACM}},
 title = {One {VM} to rule them all},
 year = {2013}
}

@misc{Yoshihiko1999,
 author = {Futamura Yoshihiko},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->},
 doi = {10.1.1.10.2747},
 groups = {VM},
 journal = {SYSTEMS COMPUTERS CONTROLS},
 title = {Partial Evaluation of Computation Process: an Approach to a Compiler-compiler},
 year = {1999}
}

@article{Zandberg2020,
 archiveprefix = {arXiv},
 author = {Koen Zandberg and Emmanuel Baccelli},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 biburl = {https://dblp.org/rec/journals/corr/abs-2011-12047.bib},
 comment = {<!-- Please prefix the notes with the date as in [22/12/2020] -->

*[15/12/2020]*

Enhancing the security of low-power low-memory devices can take the form of **process isolation**. This isolation can be conducted either:

	- By isolating **high-level business** logic, updatable on-demand remotely over the low-power network *(long-lived, non-real-time timing requirements)*
	- By isolating **debug/monitoring** code snippets at low-level, inserted and removed on-demand, remotely over the network *(short-lived, strict timing requirements)*

Concretely performing the isolation can be performed through a *modification of the hardware architecture* to add mechanisms to guarantee process isolation. This is the path taken by the **TrustZone on Arm Cortex-M**, **Sanctum on RISC-V** or **Sancus2.0 on MSP430**.

On the other hand, software-only equivalent can be achieved to perform process isolation:

-  **Small VMs:** *Darjeeling*, a subset of the JVM using a 16-bit architectures. *Wasm*, a VM specification designed for process isolation in web browsers. *JavaCard*, a small JVM running on smart cards. *eBPF* small VM hosting and isolating debug and inspection code in the Linux kernel at runtime.
- **Scripted Logic Interpreters:** *Small JavaScript run-time container* hosting business logic interpreted aboard a microcontroller, glued atop a real-time OS (*RIOT*).
- **OS-Level Mechanisms:** *Tock* is an OS written in Rust that offers strong isolation between its kernel and application logic processes. However it requires a memory protection unit (MPU).



Comparison of two VMs:

- **WebAssembly (Wasm):** Stack-based VM that uses a heap and memory allocations in chunks of 64KiB (pages). Wasm uses the LLVM compiler and once  binary is created, it is transferred to the IoT device on which it is interpreted and executed. Several interpreters exist and WASM3, for example, transpiles the loaded application to an optimized executable that can then be executed in the interpreter.
- **Extended Berkeley Packet Filters (eBPF):** Small in-kernel VM available on Unix-like OS. Original purpose was packet filtering but got rebranded to other purposes. 64-bit register-based VM with a fixed 512B stack. No heap is presented in the specification but an interface to key-value maps is used as an alternative for persistent storage between invocations.



Design of **rBPF**, a variant of the eBPF VM designed to be ISA-compatible. It extends the bindings to be able to access the OS facilities and events. The VM is integrated in the **RIOT OS** and scheduled as a regular thread. The VM can interact with multiple OS event sources. Tehe VM is based on an iterative loop design over the application instructions. Depending on the instruction, **different protection mechanisms are activated**. (1) Host address space isolated from the sandbox by policies loaded in the VM. (2) Protections on the code executed ensure the VM does not start executing code outside the supplied application. Note that the eBPF ISA *does not support indirect jump instructions and no pc register is available*. This means the virtual program counter can only be modified via the guarded direct branch and jump instructions.



VM adds overhead that has an impact on execution time and a measurable additional size. While the Wasm VM requires too much RAM and ROM, rBPF looks like a good compromise between security through process isolation and memory and time overhead.},
 eprint = {2011.12047},
 groups = {VM, Hardware, Security, Read},
 journal = {CoRR},
 title = {Minimal Virtual Machines on IoT Microcontrollers: The Case of Berkeley Packet Filters with rBPF},
 url = {https://arxiv.org/abs/2011.12047},
 volume = {abs/2011.12047},
 year = {2020}
}

